{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/MyComponent.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","MyComponent","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.36c3b32f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id}) => {\r\n\treturn(\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt='robots'/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) =>{\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user,i) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\temail={robots[i].email} \r\n\t\t\t\t\t\t\tid={robots[i].id} \t\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './SearchBox.css';\r\n\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue border'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='Search Robots' \r\n\t\t\t\tonChange = {searchChange}\r\n\t\t\t/> \r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll= (props)=>{\r\n\treturn(\r\n\t\t\t<div style={{overflowY:'scroll', border: '3px solid black',height:'46rem'}}>\r\n\t\t\t\t{props.children}\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport './MyComponent.css'\r\n\r\n\r\nconst MyComponent = ()=>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<p className='contact'>My name is Miguel De Carvalho</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default MyComponent;","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error,info){\r\n\t\tthis.setState({hasError: true});\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn(\r\n\t\t\t<h1>Ooooopsss has error</h1>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn(this.props.children);\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll'\r\nimport MyComponent from '../components/MyComponent'\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport './App.css'\r\n//agregando redux para conectar nuestros reducers\r\nimport { setSearchField , requestRobots } from '../actions'\r\n\r\nconst mapStateToProps = (state) =>{\r\n\treturn { \r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n\treturn{ \r\n\t\tonSearchChange: (event)=> dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: ()=> dispatch(requestRobots())\r\n\t}\r\n};\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n\t// Se utiliza el componentDidMount() para poder cargar la información luego de reenderizar nuestro sitio web.\r\n\t//es como cuando colocabamos el script al final de todo nuestro html para poder cargar primero la página y luego ejecutar los scripts\r\n\tcomponentDidMount(){\r\n\t\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\t// onSearchChange = (event) =>{\r\n\t// \t//Actualizando nuestra entrada a lo que se introduce en la búsqueda\r\n\t// \tthis.setState({searchfield : event.target.value})\r\n\t// }\r\n\r\n\trender(){\r\n\t\tconst {searchField, onSearchChange, robots, isPending} = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField);\r\n\t\t})\r\n\r\n\t\t//Aquí utilizando una pantalla de carga intermedia por si nuestro archivo de otra ubicación aún no se muestra\r\n\t\treturn (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1>RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange = {onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t{isPending ?\r\n\t\t\t\t\t<h1>Loading</h1> :\r\n\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t<CardList robots = {filteredRobots}/>\r\n\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t}\r\n\t\t\t\t</Scroll>\r\n\t\t\t\t<MyComponent />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\t\tCHANGE_SEARCH_FIELD,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\tREQUEST_ROBOTS_FAILED\r\n\t} from './constants.js'\r\n\r\nexport const setSearchField = (text) =>({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = ()=> (dispatch) =>{\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response =>response.json())\r\n\t.then( data => dispatch( {type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t.catch( error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n\t\tCHANGE_SEARCH_FIELD,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\tREQUEST_ROBOTS_FAILED\r\n\t} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n\tsearchField : ''\r\n} \r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn (Object.assign({}, state, {searchField: action.payload}));\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n} \r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) =>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn (Object.assign({}, state, {isPending: true}));\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn (Object.assign({}, state, {robots: action.payload, isPending: false }));\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn (Object.assign({}, state, {error: action.payload, isPending: false}));\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport { createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\t\t\t\t<Provider store={store}>\n\t\t\t\t\t<App />\n\t\t\t\t</Provider>\n\t,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}